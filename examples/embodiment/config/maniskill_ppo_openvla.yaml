defaults:
  - env/train: PutOnPlateInScene25Main
  - env/eval: maniskill_ood_template
  - override hydra/job_logging: stdout

hydra:
  run:
    dir: .
  output_subdir: null
  searchpath:
    - file://${oc.env:EMBODIED_PATH}/config/

cluster:
  num_nodes: 1
  component_placement:
    actor: 0-7
    env: 0-3
    rollout: 4-7

runner:
  task_type: embodied
  logger:
    log_path: "../results"
    project_name: rlinf
    experiment_name: "test_openvla"
    logger_backends: ["tensorboard"] # wandb, swanlab

  max_epochs: 1000
  max_steps: -1

  only_eval: False
  val_check_interval: -1
  save_interval: 40
  seq_length: 4096
  max_prompt_length: 30

algorithm:
  auto_reset: True
  ignore_terminations: False
  use_fixed_reset_state_ids: False
  normalize_advantages: True
  kl_penalty: kl  # how to estimate kl divergence: kl or kl_penalty
  group_size: 1
  n_chunk_steps: 160
  n_eval_chunk_steps: 80
  num_group_envs: 128
  rollout_epoch: 1
  reward_type: action_level
  logprob_type: action_level
  entropy_type: action_level

  adv_type: gae
  loss_type: actor_critic
  loss_agg_func: "token-mean"
  kl_beta: 0.0
  entropy_bonus: 0
  clip_ratio_high: 0.2
  clip_ratio_low: 0.2
  clip_ratio_c: 3.0
  value_clip: 0.2
  huber_delta: 10.0

  gamma: 0.99
  gae_lambda: 0.95

  # params for rollout
  sampling_params:
    use_greedy: False
    temperature_train: 1.0
    temperature_eval: 0.6
    top_k: 0
    top_p: 1.0
    repetition_penalty: 1.0

  # length argument for autoregressive sampling
  # max length means max amount of tokens to generate
  length_params:
    max_new_token: 7
    max_length: 1024
    min_length: 1

env:
  group_name: "EnvGroup"
  channel:
    name: "env_buffer_list"
    queue_name: "obs_buffer"
    queue_size: 0
  enable_offload: False

rollout:
  group_name: "RolloutGroup"
  channel:
    name: ${env.channel.name}
    queue_name: "action_buffer"
    queue_size: 0
  mode: "colocate"
  backend: "huggingface"
  model_dir: "/path/to/model/rl4vla/openvla-7b-rlvla-warmup/"
  enable_offload: True
  pipeline_stage_num: 2

actor:
  group_name: "ActorGroup"
  channel:
    name: ${env.channel.name}
    queue_name: "replay_buffer"
    queue_size: 0
  training_backend: "fsdp"
  checkpoint_load_path: "/path/to/model/rl4vla/openvla-7b-rlvla-warmup/"
  checkpoint_save_path: "../results"
  micro_batch_size: 40
  global_batch_size: 640
  seed: 1234
  enable_offload: True

  model:
    model_name: "openvla"
    is_vla_model: True
    action_dim: 7
    num_action_chunks: 1
    use_proprio: False
    unnorm_key: bridge_orig
    center_crop: True
    do_sample: False
    
    precision: "bf16"
    add_bias_linear: False
    add_qkv_bias: True
    vocab_size: 32000
    hidden_size: 4096
    policy_setup: "widowx_bridge"
    add_value_head: True
    image_size: [224, 224]
    is_lora: True
    lora_rank: 32
    ckpt_path: null
    use_wrist_image: False
    attn_implementation: "flash_attention_2"
    low_cpu_mem_usage: True
    trust_remote_code: True
    gradient_checkpointing: False

  optim:
    lr: 1.0e-4
    value_lr: 3.0e-3
    adam_beta1: 0.9
    adam_beta2: 0.999
    adam_eps: 1.0e-05
    clip_grad: 10.0
    critic_warmup_steps: 0

  tokenizer:
    tokenizer_type: "HuggingFaceTokenizer"
    tokenizer_model: "/path/to/model/rl4vla/openvla-7b-rlvla-warmup/"
    use_fast: False
    trust_remote_code: True
    padding_side: "right"

  fsdp_config:                  # below are fsdp configs, for more details, see https://pytorch.org/docs/stable/fsdp.html and https://huggingface.co/docs/accelerate/package_reference/fsdp

    strategy: "fsdp"            # FSDP strategy: ["fsdp", "fsdp2"]

    # Sharding strategy: "full_shard" (shard parameters, gradients, optimizer states),
    # "shard_grad_op" (shard gradients and optimizer states only), 
    # "hybrid_shard" (combines data parallelism and model parallelism - sharding within FSDP groups, replicate across DDP groups),
    # "no_shard" (no sharding)
    sharding_strategy: "full_shard" 

    forward_prefetch: False      # if True, FSDP will explicitly prefetches the next upcoming all-gather while executing in the forward pass. only use with static graphs. Overlaps communication with computation to improve performance.
    limit_all_gathers: False     # if True, FSDP will synchronizes CPU threads to limit the number of concurrent all-gathers. Only affects strategies that schedule all-gathers
    backward_prefetch: null      # options are null, 'pre', 'post'. if 'pre', FSDP will prefetch the next upcoming all-gather while computing gradients. if 'post', FSDP will prefetch the next all-gather until current gradient is computed.
    use_orig_params: False       # if True, FSDP will use module's original parameters, it means it will expose nn.Module.named_parameters rather than FlatParameter
    use_liger_kernel: False      # if True, liger_kernel will be used for FSDP, note that currently supported models in RLinf are [qwen2.5, qwen2.5-vl], for more details, see liger_kernel's doc

    fsdp_size: -1               # Number of GPUs per FSDP group for hybrid sharding. -1 means use all available GPUs in a single FSDP group

    mixed_precision:            # mixed precision settings for fsdp/fsdp2
      param_dtype: ${actor.model.precision}
      reduce_dtype: ${actor.model.precision}
      buffer_dtype: ${actor.model.precision}

reward:
  use_reward_model: False

critic:
  use_critic_model: False