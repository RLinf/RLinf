defaults:
  - env/train: PushCube
  - env/eval: PushCube
  - override hydra/job_logging: stdout

hydra:
  run:
    dir: .
  output_subdir: null
  searchpath:
    - file://${oc.env:EMBODIED_PATH}/config/

cluster:
  num_nodes: 1
  num_gpus_per_node: 8
  component_placement:
    actor: 1-1
    env: 1-1
    rollout: 1-1

runner:
  task_type: embodied
  logger:
    log_path: "../results"
    project_name: rlinf
    experiment_name: "sac_mlp"
    logger_backends: ["tensorboard"] # wandb, swanlab

  max_epochs: 16000
  max_steps: -1

  only_eval: False
  val_check_interval: 100
  save_interval: -1
  seq_length: 4096
  max_prompt_length: 30

algorithm:
  auto_reset: True
  ignore_terminations: True
  use_fixed_reset_state_ids: False
  require_values: False  # SAC doesn't use value function for advantages
  normalize_advantages: False  # SAC doesn't use advantages
  kl_penalty: kl
  group_size: 1

  n_chunk_steps: 2
  n_eval_chunk_steps: 50
  # training rollout mbs
  num_group_envs: 32
  rollout_epoch: 1

  reward_type: action_level
  logprob_type: action_level
  entropy_type: action_level

  # mbs to do log prob inference
  logprob_forward_micro_batch_size: 16

  # SAC-specific algorithm settings
  adv_type: embodied_sac  # Use SAC returns computation
  loss_type: embodied_sac  # Use SAC loss functions with Gumbel-Softmax
  loss_agg_func: "token-mean"
  
  # Gumbel-Softmax parameters
  use_gumbel_softmax: True  # Enable Gumbel-Softmax for differentiable discrete actions
  gumbel_temperature: 1.0   # Temperature for Gumbel-Softmax sampling
  
  # SAC hyperparameters
  gamma: 0.8
  tau: 0.01  # Soft update coefficient for target networks
  alpha: 0.2  # Temperature parameter (if not using auto-tuning)
  auto_entropy_tuning: True  # Enable automatic entropy tuning
  initial_alpha: 0.2  # Initial temperature value
  target_entropy: -4  # Target entropy (-action_dim)
  alpha_lr: 3.0e-4  # Learning rate for temperature parameter
  
  # Replay buffer settings
  replay_buffer_capacity: 300000
  min_buffer_size: 0  # Minimum buffer size before training starts
  num_updates_per_step: 32  # Number of gradient updates per training step
  target_update_freq: 1  # Frequency of target network updates

  # params for rollout
  sampling_params:
    use_greedy: False
    temperature_train: 1.0
    temperature_eval: 0.6
    top_k: 50
    top_p: 1.0
    repetition_penalty: 1.0

  # length argument for autoregressive sampling
  length_params:
    max_new_token: 7
    max_length: 1024
    min_length: 1

env:
  group_name: "EnvGroup"
  channel:
    name: "env_buffer_list"
    queue_name: "obs_buffer"
    queue_size: 0
  enable_offload: False

rollout:
  group_name: "RolloutGroup"
  channel:
    name: ${env.channel.name}
    queue_name: "action_buffer"
    queue_size: 0
  mode: "colocate"
  backend: "huggingface"
  model_dir: ""
  gpu_memory_utilization: 0.5
  enforce_eager: True
  enable_offload: False
  pipeline_stage_num: 1

actor:
  group_name: "ActorGroup"
  channel:
    name: ${env.channel.name}
    queue_name: "replay_buffer"
    queue_size: 0
  training_backend: "fsdp"

  checkpoint_load_path: ""
  checkpoint_save_path: "../results"

  micro_batch_size: 1024  # Smaller batch size for SAC
  global_batch_size: 1024   # Smaller global batch size
  seed: 1234
  enable_offload: False

  model:
    model_name: "cnn"
    policy_setup: "panda-ee"
    image_size: [3, 64, 64]
    state_dim: 25
    action_dim: 4
    num_action_chunks: 1
    hidden_dim: 256
    
    precision: "32"
    add_value_head: False
    add_q_head: True
    
    is_lora: False
    lora_rank: 32
    ckpt_path: null
    gradient_checkpointing: False
    sharding_strategy: no_shard
    vh_mode: "q_network"
    q_network_separate_processing: True


  optim:
    lr: 3.0e-4  # Lower learning rate for SAC
    value_lr: 3.0e-4  # Q-network learning rate
    adam_beta1: 0.9
    adam_beta2: 0.999
    adam_eps: 1.0e-08
    clip_grad: 1.0

  fsdp_config:
    use_orig_params: False

reward:
  use_reward_model: False

critic:
  use_critic_model: False
